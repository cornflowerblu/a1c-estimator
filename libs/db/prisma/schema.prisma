generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/client/a1c"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// UserMedicalProfile model - Stores medical-related user information
model UserMedicalProfile {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String       @unique
  diabetesType  DiabetesType?
  birthYear     Int?
  targetA1C     Float?
  preferredUnit GlucoseUnit  @default(MGDL)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// GlucoseReading model
model GlucoseReading {
  id          String      @id @default(uuid())
  value       Float
  timestamp   DateTime
  mealContext MealContext
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  run         Run?        @relation(fields: [runId], references: [id])
  runId       String?
  
  // Indexes
  @@index([userId])
  @@index([timestamp])
  @@index([runId])
}

// Run model
model Run {
  id              String    @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  calculatedA1C   Float?
  averageGlucose  Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  readings        GlucoseReading[]
  month           Month?    @relation(fields: [monthId], references: [id])
  monthId         String?
  
  // Indexes
  @@index([userId])
  @@index([monthId])
  @@index([startDate, endDate])
}

// Month model
model Month {
  id              String    @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  calculatedA1C   Float?
  averageGlucose  Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  runs            Run[]
  
  // Indexes
  @@index([userId])
  @@index([startDate, endDate])
}

// UserPreferences model
model UserPreferences {
  id                String            @id @default(uuid())
  displayUnit       DisplayUnit       @default(A1C)
  targetA1C         Float?
  reminderEnabled   Boolean           @default(false)
  reminderFrequency ReminderFrequency @default(DAILY)
  theme             Theme             @default(SYSTEM)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String            @unique
}

// Enums
enum MealContext {
  BEFORE_BREAKFAST
  AFTER_BREAKFAST
  BEFORE_LUNCH
  AFTER_LUNCH
  BEFORE_DINNER
  AFTER_DINNER
  BEDTIME
  WAKEUP
  FASTING
  OTHER
}

enum DisplayUnit {
  A1C
  AG
}

enum ReminderFrequency {
  DAILY
  TWICE_DAILY
  WEEKLY
  CUSTOM
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum DiabetesType {
  TYPE_1
  TYPE_2
  GESTATIONAL
  PREDIABETES
  OTHER
}

enum GlucoseUnit {
  MGDL
  MMOLL
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Your existing User fields
  preferences      UserPreferences?
  medicalProfile   UserMedicalProfile?
  glucoseReadings  GlucoseReading[]
  runs             Run[]
  months           Month[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}